import jm.JMC;import jm.music.data.*;import jm.midi.*;import jm.music.tools.*;import jm.util.*;/** * An example which generates a drum kit pattern * and writes to a MIDI file called kit.mid * This version uses static methods in the one class. * @author Andrew Brown */public final class DrumAndBassKit implements JMC{	final static Double NOTE_LENGTH = 0.25; // 16ths	public static void main(String[] args){		Score pattern1 = new Score("Static Drum and bass example", 174);		Part drums = new Part("Drums", 0, 9); // 9 = MIDI channel 10		Phrase phrBD;		Phrase phrSD;		Phrase phrHH;		CPhrase phrEnd = new CPhrase();				//calling static methods below		phrBD = KickPattern();				phrSD = SnarePattern();		phrHH = HatsPattern();				//phrEnd = EndPattern();				// loop the drum pattern		int loopNum = 8;		Mod.repeat(phrBD, loopNum);		Mod.repeat(phrSD, loopNum);		Mod.repeat(phrHH, loopNum);				// add phrases to the instrument (part)		drums.addPhrase(phrBD);		drums.addPhrase(phrSD);		drums.addPhrase(phrHH);	//	drums.addCPhrase(phrEnd);				// add the drum part to a score.		pattern1.addPart(drums);				// write the score to a MIDIfile		Write.midi(pattern1, "StaticKit.mid");		Play.midi(pattern1);	//	View.show(pattern1);	}		private static Phrase KickPattern() {		// make bass drum		Phrase phrase = new Phrase(0.0);		for(int i=0;i<16;i++){			if (i  == 0 || i == 10){				Note note = new Note(36, NOTE_LENGTH);				phrase.addNote(note);			}else {				Note rest = new Note(REST, NOTE_LENGTH);				phrase.addNote(rest);			}		}		return phrase;	}		private static Phrase SnarePattern() {		// make snare drum		Phrase phrase = new Phrase(0.0);		for(int i=0;i<16;i++){			if (i  == 4 || i == 12){				Note note = new Note(ACOUSTIC_SNARE, NOTE_LENGTH);				phrase.addNote(note);			}else {				Note rest = new Note(REST, NOTE_LENGTH);				phrase.addNote(rest);			}		}		return phrase;	}		private static Phrase HatsPattern() {		Phrase phrase = new Phrase(0.0);		// make hats		for(int i=0;i<8;i++){			Note note = new Note(CLOSED_HI_HAT, NOTE_LENGTH);			phrase.addNote(note);			Note rest = new Note(REST, NOTE_LENGTH);			phrase.addNote(rest);		}	//	Note note = new Note(46, NOTE_LENGTH); // open hi hat		//phrase.addNote(note);				return phrase;	}		private static CPhrase EndPattern() {		// make crash ending		CPhrase cphrase = new CPhrase();		int[] pitchArray1a = {36,49}; // kick and crash cymbal		cphrase.addChord(pitchArray1a, SB);				return cphrase;	}		}